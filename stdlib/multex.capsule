this.new = function(this)
  return {
    __type = "store",
    __hooks = {},
    __state = {},
    __events = {},
    __computedProperties = {},
    __actionHandler = nil,
    __helpers = {
      shallowCopy = function(original)
        local copy = {}
        for key, value in pairs(original) do
            copy[key] = value
        end
        return copy
      end,
    },

    onAction = function(this, callback)
      this.__actionHandler = callback
    end,

    setComputedProperty = function(this, value, callback)
      this.__computedProperties[value] = callback
    end,

    setHook = function(hookName, callback)
      this.__hooks[hookName] = callback
    end,

    dispatch = function(this, name, payload)
      if this.__hooks["beforeAction"] then
        this.__hooks["beforeAction"](name, payload)
      end
      this.__actionHandler(name, payload)
      if this.__hooks["afterAction"] then
        this.__hooks["afterAction"](name, payload)
      end
    end,

    getState = function(this)
      return this.__helpers.shallowCopy(this.__state)
    end,

    setState = function(this, state)
      for fieldName, fieldValue in pairs(state) do
        this.__state[fieldName] = fieldValue
        if this.__computedProperties[fieldName] then
          this.__computedProperties[fieldName]()
          this:emit("computed_update")
        end
      end
      this:emit("update")
    end,

    setInitialState = function(this, initialState)
      this.__state = initialState
      this:emit("initial_state_set")
    end,

    on = function(this, eventName, callback)
      this.__events[eventName] = callback
    end,

    emit = function(this, eventName)
      if this.__events[eventName] then
        this.__events[eventName]()
      end
    end,
  }
end