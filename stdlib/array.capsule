local Callback = self:import("stdlib/callback")

self.new = function(self, ...)
	local arrayTable = {...}

	local proxyTable = setmetatable({
		__values = arrayTable,
		new = self.new,
		length = #arrayTable,

		push = function(self, value)
			table.insert(self.__values, value)
			self.length = self.length + 1
			return true
		end,

		pop = function(self, value)
			local valueToPop = self.__values[#self.__values]
			table.remove(self.__values, #self.__values)
			self.length = self.length - 1
			return valueToPop
		end,

		shift = function(self, value)
			local valueToShift = self.__values[1]
			self.length = self.length - 1
			table.remove(self.__values, 1)
			return valueToShift
		end,

		toString = function(self)
			local stringRep = "["
			for _, value in pairs(self.__values) do
				stringRep = stringRep .. value .. ", "
			end

			stringRep = stringRep:sub(1, -3) .. "]"
			return stringRep
		end,

		map = function(self, callback)
			if type(callback) == "string" then
				callback = Callback:parse(callback)
			end

			local newArray = {}
			for _, value in pairs(self.__values) do
				table.insert(newArray, callback(value))
			end

			return self:new(unpack(newArray))
		end,

		filter = function(self, callback)
			local newArray = {}
			for _, value in pairs(self.__values) do
				local evaluation = callback(value)
				if evaluation then
					table.insert(newArray, evaluation)
				end
			end

			return self:new(unpack(newArray))
		end,

		includes = function(self, expected)
			for _, value in pairs(self.__values) do
				if value == expected then
					return true
				end
			end

			return false
		end,

		reverse = function(self)
			local reversedTable = {}
			local itemCount = #self.__values
			for k, v in ipairs(self.__values) do
			    reversedTable[itemCount + 1 - k] = v
			end

			return self:new(unpack(reversedTable))
		end,

		forEach = function(self, callback)
			for key, value in pairs(self.__values) do
				callback(value, key)
			end
		end,

		toJSON = function(self)
			return toJSON(self.__values)
		end,

		join = function(self, delim)
			if delim == nil then
				delim = ","
			end
			local joined = ""

			for _, value in pairs(self.__values) do
				joined = joined .. value .. ", "
			end

			joined = joined:sub(1, -3)
			return joined
		end

		}, {
		__type = "array",
		__index = function(self, key)
			if self.__values[key + 1] then
				return self.__values[key + 1]
			else
				return nil
			end
		end,

		__newindex = function(self)
			outputDebugString("Error. Use the :push() method to push a value to an array.", 1)
		end,

	})

	return proxyTable
end