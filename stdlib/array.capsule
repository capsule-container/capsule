self.new = function(self, ...)
	local arrayTable = {...}	
	
	local proxyTable = setmetatable({
		__values = arrayTable,
		length = #arrayTable,
		
		push = function(self, value)
			table.insert(self.__values, value)
			self.length = self.length + 1
			return true
		end,
		
		pop = function(self, value)
			local valueToPop = self.__values[#self.__values]
			table.remove(self.__values, #self.__values)
			self.length = self.length - 1
			return valueToPop
		end,
		
		shift = function(self, value)
			local valueToShift = self.__values[1]
			self.length = self.length - 1
			table.remove(self.__values, 1)
			return valueToShift
		end,	
	
		toString = function(self)
			local stringRep = "["
			for _, value in pairs(self.__values) do
				stringRep = stringRep .. value .. ", "
			end
			
			stringRep = stringRep:sub(1, -3) .. "]"
			return stringRep
		end
	
		}, {
		__type = "array",
		__index = function(self, key)
			if self.__values[key + 1] then
				return self.__values[key + 1]
			else
				return nil
			end
		end,
		
		__newindex = function(self)
			outputDebugString("Error. Use the :push() method to push a value to an array.", 1)
		end,
		
	})
	
	return proxyTable
end