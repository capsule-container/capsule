this.from = function(this, first, ...)
  local pipeline = {
    __type = "pipeline",
    __pipes = {
      {func = first, args = {...}}
    },
    __pipeCounter = 1,

    to = function(this, fun, ...)
      table.insert(this.__pipes, {func = fun, args = {...}, internal = false})
      return this
    end,

    toInternal = function(this, fun, ...)
      table.insert(this.__pipes, {func = fun, args = {...}, internal = true})
      return this
    end,

    run = function(this, returnValue)
      if this.__pipes[this.__pipeCounter] == nil then
        return
      end

      local currentPipe = this.__pipes[this.__pipeCounter]

      local callee = currentPipe.func
      local args = currentPipe.args

      if callee then
        this.__pipeCounter = this.__pipeCounter + 1
        local evaluation

        if currentPipe.internal then
          evaluation = callee(this, returnValue, unpack(args))
        else
          evaluation = callee(returnValue, unpack(args))
        end

        return this:run(evaluation)
      else
        this.__pipes = {}
        this.__pipeCounter = 0
      end
    end
  }

  return setmetatable(pipeline, {})
end